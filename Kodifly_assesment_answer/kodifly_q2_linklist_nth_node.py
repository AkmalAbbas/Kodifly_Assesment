# -*- coding: utf-8 -*-
"""Kodifly_Q2_LinkList_nth_node.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12ibTbXov15SglqsnTwryqqwpmt2qvI_a
"""

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def removeNthFromEnd(self, head, n: int):
      # Initialized two pointers
      # Both pointers will point to Start of the linklist
      pointer1 = head 
      pointer2 = head 
      count = 0

      # this loop will iterate until pointer2 become None
      # once the pointer2 will gets to the end of the list
      # pointer 1 will automatically points to the nth node
      while pointer2 is not None:
          if count > n:            
              pointer1 = pointer1.next
          pointer2 = pointer2.next
          count += 1
      
      if count > n:
        # if pointer1 will point to next node of the nth node(which we want to delete)
        pointer1.next = pointer1.next.next
        # and will return the Link list with updated links
        return head  
      else:
        return head.next

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
    def removeNthFromEnd(self, head, n: int):
      # Initializing the two pointers fast and slow
      # In first step both pointers will point to initial node
      dummy = fast = slow = ListNode(0,next=head)
      # Fast pointer will iterate to the nth node 
      # which we want to delete
      for _ in range(n):
        fast = fast.next
      
      # In this step now the fast pointer is nth step ahead of slow pointer
      # we will iterate to the end where fast pointer next will point to null
      while fast.next:
        fast = fast.next
        slow = slow.next
      # Once fast pointer reaches the end of the list
      # slow pointer will automatically points to the node which
      # we want to delete
      # so we will assign the next node to the slow pointer and deletes the 
      # nth node
      slow.next = slow.next.next

      return dummy.next

