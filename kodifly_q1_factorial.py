# -*- coding: utf-8 -*-
"""Kodifly_Q1_Factorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FbWTfShqyhr02B026nZXmVMcHlvYNnDx
"""

def sum_of_digits_in_factorial(n, method=1):
  """
  Arguments Detail
  n : Number to find factorial of
  method : I have solved this problem with 2 methods so 
          it is a method of choice for user to select his preffered method to solve this question
  """
  """
  This is my repository

  """
  factorial = 1 # a variable is defined to store the factorial
  sum = 0 # variable to count the summation of the factorial digits

  if n < 0:
    # if the input number is negative then return 0 because negative number has no factorial
    factorial = 0
  elif n == 0 or n == 1:
    # if the factorial numbre is equal to 0 or 1 the factorial is 1
    factorial = 1
  else:  
    # Calculating the factorial of the given input number (n)  
    while n > 1:
      factorial = factorial * n
      n = n - 1
  
  if method == 1:
    # in the first step the digits in factorial are converted into list of digits
    # using list comprehension
    # Then by looping upon the list summation is counted in the variable sum
    digit_list = [int(x) for x in str(factorial)]    
    for i in digit_list:
      sum = sum + i

  elif method == 2:
    # In method 2   
    while factorial > 0:
      # Factorial modulus 10 will give the last digit of the factorial number
      # then this number will be added into sum variable      
      sum = sum + factorial % 10
      # Below step will perform the floor division by 10 and 
      # it will reduce the factorial number by removing the last digit
      factorial = factorial // 10
  return sum

print(sum_of_digits_in_factorial(100,method=1))

